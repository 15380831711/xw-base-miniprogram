"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const alert_service_1 = require("../alert-service/alert-service");
class AppServiceProvider {
    constructor() {
        this.header = { "content-type": "application/x-www-form-urlencoded" };
        this.alertService = new alert_service_1.AlertServiceProvider();
    }
    get(url, params, callback, loading = false) {
        const that = this;
        if (loading) {
            that.alertService.showLoading("loading...");
        }
        Object.assign(params, { platform: this.getPalformNumber() });
        wx.request({
            url: that.getReqUrl(url),
            data: params,
            header: this.header,
            method: "GET",
            dataType: "json",
            responseType: "text",
            success(res) {
                that.successHandler(res, callback);
            },
            fail(res) {
                that.errorHandler(res);
            },
            complete() {
                loading && that.alertService.closeLoading();
            }
        });
    }
    post(url, params, callback, loading = false) {
        const that = this;
        params.platform = this.getPalformNumber();
        if (loading) {
            that.alertService.showLoading("loading...");
        }
        wx.request({
            url: that.getReqUrl(url),
            data: params,
            header: this.header,
            method: "POST",
            dataType: "json",
            responseType: "text",
            success(res) {
                that.successHandler(res, callback);
            },
            fail(res) {
                that.errorHandler(res);
            },
            complete() {
                loading && that.alertService.closeLoading();
            }
        });
    }
    getPalformNumber() {
        return 4;
    }
    getReqUrl(url) {
        if (url.indexOf("http://") == 0 || url.indexOf("https://") == 0) {
            return url;
        }
        return AppServiceProvider.BASE_DOMAIN_API + url;
    }
    checkLogin() {
        let token = "";
        if (token != "") {
            return true;
        }
        else {
            return false;
        }
    }
    getToken() {
        return "";
    }
    gotoLogin() { }
    push(url, json = {}) {
        let urlParams = Object.keys(json)
            .map(function (key) {
            return encodeURIComponent(key) + "=" + encodeURIComponent(json[key]);
        })
            .join("&");
        if (url.indexOf("?") == -1) {
            url += "?" + urlParams;
        }
        else {
            url += "&" + urlParams;
        }
        wx.navigateTo({
            url: url
        });
    }
    successHandler(res, callback) {
        if (res.data.code == 200) {
            callback && callback(res.data);
        }
        else {
            this.errorHandler(res);
        }
    }
    errorHandler(res) {
        console.log(res);
        this.alertService.alert("网络开小差");
    }
}
AppServiceProvider.BASE_DOMAIN = "https://www.qingyan.com55.cn/";
AppServiceProvider.BASE_API = "api/";
AppServiceProvider.BASE_DOMAIN_API = AppServiceProvider.BASE_DOMAIN + AppServiceProvider.BASE_API;
exports.AppServiceProvider = AppServiceProvider;
//# sourceMappingURL=data:application/json;base64,