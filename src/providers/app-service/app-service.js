"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var alert_service_1 = require("../alert-service/alert-service");
var AppServiceProvider = (function () {
    function AppServiceProvider() {
        this.header = { 'content-type': 'application/x-www-form-urlencoded' };
        this.alertService = alert_service_1.default;
    }
    AppServiceProvider.prototype.getPalformNumber = function () {
        return 4;
    };
    AppServiceProvider.prototype.getReqUrl = function (url) {
        if (url.indexOf('http://') == 0 || url.indexOf('https://') == 0) {
            return url;
        }
        return AppServiceProvider.BASE_DOMAIN_API + url;
    };
    AppServiceProvider.prototype.checkLogin = function () {
        var token = '';
        if (token != '') {
            return true;
        }
        else {
            return false;
        }
    };
    AppServiceProvider.prototype.getToken = function () {
        return '';
    };
    AppServiceProvider.prototype.gotoLogin = function () { };
    AppServiceProvider.prototype.push = function (url, json) {
        if (json === void 0) { json = {}; }
        url = this.getPageUrl(url, json);
        wx.navigateTo({
            url: url
        });
    };
    AppServiceProvider.prototype.pushTabs = function (url) {
        url = this.getPageUrl(url);
        wx.switchTab({
            url: url
        });
    };
    AppServiceProvider.prototype.pop = function (delta) {
        if (delta === void 0) { delta = 1; }
        wx.navigateBack({
            delta: delta
        });
    };
    AppServiceProvider.prototype.successHandler = function (res, callback) {
        if (res.data.code == 200) {
            callback && callback(res.data);
        }
        else {
            this.errorHandler(res);
        }
    };
    AppServiceProvider.prototype.errorHandler = function (res) {
        console.log(res);
        this.alertService.alert('网络开小差');
    };
    AppServiceProvider.prototype.getPageUrl = function (url, json) {
        if (json === void 0) { json = {}; }
        if (url.indexOf('../') === -1 && url.indexOf('?') === -1) {
            url = '../' + url + '/' + url;
        }
        var jsonKeys = Object.keys(json);
        if (jsonKeys.length === 0) {
            return url;
        }
        var urlParams = jsonKeys
            .map(function (key) {
            return encodeURIComponent(key) + '=' + encodeURIComponent(json[key]);
        })
            .join('&');
        if (url.indexOf('?') === -1) {
            url += '?' + urlParams;
        }
        else {
            url += '&' + urlParams;
        }
        return url;
    };
    AppServiceProvider.BASE_DOMAIN = 'https://www.yilabao.cn/';
    AppServiceProvider.BASE_API = 'api/';
    AppServiceProvider.BASE_DOMAIN_API = AppServiceProvider.BASE_DOMAIN + AppServiceProvider.BASE_API;
    return AppServiceProvider;
}());
exports.AppServiceProvider = AppServiceProvider;
exports.default = new AppServiceProvider();
//# sourceMappingURL=data:application/json;base64,