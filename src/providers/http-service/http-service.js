"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var alert_service_1 = require("../alert-service/alert-service");
var app_service_1 = require("../app-service/app-service");
var HttpServiceProvider = (function () {
    function HttpServiceProvider() {
        this.header = { 'content-type': 'application/x-www-form-urlencoded' };
        this.alertService = alert_service_1.default;
        this.appService = app_service_1.default;
    }
    HttpServiceProvider.prototype.get = function (url, params, callback, loading) {
        if (loading === void 0) { loading = false; }
        var that = this;
        if (loading) {
            that.alertService.showLoading('loading...');
        }
        params.token = this.appService.getToken();
        params.platform = this.getPalformNumber();
        wx.request({
            url: that.getReqUrl(url),
            data: params,
            header: this.header,
            method: 'GET',
            dataType: 'json',
            responseType: 'text',
            success: function (res) {
                if (callback) {
                    that.successHandler(res, callback);
                }
            },
            fail: function (res) {
                that.errorHandler(res);
            },
            complete: function () {
                loading && that.alertService.closeLoading();
            },
        });
    };
    HttpServiceProvider.prototype.httpPost = function (url, params, loading, callback, errorCallback) {
        if (loading === void 0) { loading = false; }
        var that = this;
        params.platform = this.getPalformNumber();
        params.token = this.appService.getToken();
        if (loading) {
            that.alertService.showLoading('loading...');
        }
        wx.request({
            url: that.getReqUrl(url),
            data: params,
            header: this.header,
            method: 'POST',
            dataType: 'json',
            responseType: 'text',
            success: function (res) {
                if (res && res.header && res.header['Set-Cookie']) {
                    wx.setStorageSync('cookieKey', res.header['Set-Cookie']);
                }
                if (callback) {
                    that.successHandler(res, callback, errorCallback);
                }
            },
            fail: function (res) {
                if (errorCallback) {
                    that.errorHandler(res, errorCallback);
                }
            },
            complete: function () {
                loading && that.alertService.closeLoading();
            },
        });
    };
    HttpServiceProvider.prototype.post = function (url, params, callback, loading) {
        if (loading === void 0) { loading = false; }
        var that = this;
        params.platform = this.getPalformNumber();
        params.token = this.appService.getToken();
        if (loading) {
            that.alertService.showLoading('loading...');
        }
        var cookie = wx.getStorageSync('cookieKey');
        var cookies = { Cookie: cookie };
        if (cookie) {
            this.header.Cookie = cookie;
        }
        wx.request({
            url: that.getReqUrl(url),
            data: params,
            header: this.header,
            method: 'POST',
            dataType: 'json',
            responseType: 'text',
            success: function (res) {
                if (callback) {
                    that.successHandler(res, callback);
                }
            },
            fail: function (res) {
                that.errorHandler(res);
            },
            complete: function () {
                loading && that.alertService.closeLoading();
            },
        });
    };
    HttpServiceProvider.prototype.getPalformNumber = function () {
        return 4;
    };
    HttpServiceProvider.prototype.getReqUrl = function (url) {
        if (url.indexOf('http://') == 0 || url.indexOf('https://') == 0) {
            return url;
        }
        return app_service_1.AppServiceProvider.BASE_DOMAIN_API + url;
    };
    HttpServiceProvider.prototype.checkLogin = function () {
        var token = '';
        if (token != '') {
            return true;
        }
        else {
            return false;
        }
    };
    HttpServiceProvider.prototype.getToken = function () {
        return '';
    };
    HttpServiceProvider.prototype.gotoLogin = function () { };
    HttpServiceProvider.prototype.push = function (url, json) {
        if (json === void 0) { json = {}; }
        var urlParams = Object.keys(json)
            .map(function (key) {
            return encodeURIComponent(key) + '=' + encodeURIComponent(json[key]);
        })
            .join('&');
        if (url.indexOf('?') == -1) {
            url += '?' + urlParams;
        }
        else {
            url += '&' + urlParams;
        }
        wx.navigateTo({
            url: url,
        });
    };
    HttpServiceProvider.prototype.pushTabs = function (url) {
        wx.switchTab({
            url: url,
        });
    };
    HttpServiceProvider.prototype.pop = function (delta) {
        if (delta === void 0) { delta = 1; }
        wx.navigateBack({
            delta: delta,
        });
    };
    HttpServiceProvider.prototype.successHandler = function (res, callback, errorCallback) {
        if (res.data.code == 200) {
            callback && callback(res.data);
        }
        else {
            this.errorHandler(res, errorCallback);
        }
    };
    HttpServiceProvider.prototype.errorHandler = function (res, errorCallback) {
        if (errorCallback) {
            errorCallback && errorCallback(res.data);
        }
        else {
            this.alertService.alert(res.data.message);
        }
    };
    return HttpServiceProvider;
}());
exports.HttpServiceProvider = HttpServiceProvider;
exports.default = new HttpServiceProvider();
//# sourceMappingURL=data:application/json;base64,